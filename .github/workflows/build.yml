name: Build

on:
  push:
    branches:
      - master


jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Clean Maven cache
        run: rm -rf ~/.m2/repository/org/sonarsource/scanner
      - name: Build and analyze
        continue-on-error: true
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=portfolio -Dsonar.projectName='portfolio'
      - name: Create GitHub issues for SonarQube high severity findings
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get high-severity issues from SonarQube
          curl -s -u "$SONAR_TOKEN:" "http://74.235.186.15:9000/api/issues/search?componentKeys=portfolio&severities=CRITICAL,BLOCKER&statuses=OPEN" > sonarqube_issues.json
          cat sonarqube_issues.json

          # Only proceed if the file is valid and has issues
          if jq -e '.issues | length > 0' sonarqube_issues.json > /dev/null; then
            jq -c '.issues[]' sonarqube_issues.json | while read -r issue; do
              severity=$(echo "$issue" | jq -r '.severity')
              title="SonarQube: [${severity}] $(echo "$issue" | jq -r '.message')"
              file=$(echo "$issue" | jq -r '.component' | sed 's/^portfolio://')
              line=$(echo "$issue" | jq -r '.line // "N/A"')
              rule=$(echo "$issue" | jq -r '.rule')
              rule_id=$(echo "$rule" | cut -d: -f2)
              author=$(echo "$issue" | jq -r '.author // "N/A"')
              effort=$(echo "$issue" | jq -r '.effort // "N/A"')
              tags=$(echo "$issue" | jq -r '.tags | join(", ") // "None"')
              description=$(echo "$issue" | jq -r '.description // "No description provided."')
              key=$(echo "$issue" | jq -r '.key')
              sonarqube_url="http://74.235.186.15:9000/project/issues?id=portfolio&open=$key"
              body="**SonarQube Finding**\n\n"
              body+="- **Severity:** $severity\n"
              body+="- **Rule:** [$rule](https://rules.sonarsource.com/java/RSPEC-$rule_id)\n"
              body+="- **File:** \`$file\` (line $line)\n"
              body+="- **Author:** $author\n"
              body+="- **Effort to fix:** $effort\n"
              body+="- **Tags:** $tags\n\n"
              body+="**Message:**  $(echo "$issue" | jq -r '.message')\n\n"
              body+="**Description:**  $description\n\n"
              body+="[View in SonarQube]($sonarqube_url)\n"
              gh issue create --title "$title" --body "$body" --label "bug"
            done
          else
            echo "No high-severity issues found or invalid response from SonarQube."
          fi
