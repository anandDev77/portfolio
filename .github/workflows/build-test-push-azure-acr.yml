# =====================================================================================================
# GitHub Actions Workflow: Build, Push to Azure ACR, and Update GitOps for AKS Deployment
# -----------------------------------------------------------------------------------------------------
# This workflow automates the CI/CD process for a microservice (e.g., portfolio) in the StockTrader app.
# It builds a Docker image, pushes it to Azure Container Registry (ACR), and updates the GitOps repo
# with the new image tag, which then triggers deployment to Azure Kubernetes Service (AKS).
#
# -----------------------------------
# SETUP INSTRUCTIONS (REQUIRED STEPS)
# -----------------------------------
# 1. Create an Azure Container Registry (ACR) for your images:
#    az acr create --name <acr-name> --resource-group <resource-group> --sku Basic
#    Set the ACR_NAME env variable below to your registry's name.
#
# 2. Set up your AKS cluster and ensure the StockTrader operator is installed.
#    Make sure your target namespace and required secrets (e.g., cjot-credentials) exist in AKS.
#
# 3. Fork or create a GitOps repo to hold your deployment manifests (YAML files).
#    Set GITOPS_REPO and GITOPS_DIR below accordingly.
#
# 4. Store the following as GitHub repository secrets:
#    - AZURE_CLIENT_ID: Azure App Registration or Managed Identity client ID
#    - AZURE_TENANT_ID: Azure tenant ID
#    - AZURE_SUBSCRIPTION_ID: Azure subscription ID
#    - GITOPS_TOKEN: GitHub PAT with write access to your GitOps repo
#    - GITOPS_USERNAME: Your GitHub username
#
# 5. Set the following environment variables as needed:
#    - GITOPS_REPO: <your-github-username>/<your-gitops-repo>
#    - GITOPS_DIR: application
#    - IMAGE_NAME: portfolio
#    - APP_NAME: portfolio
#    - IMAGE_TAG: ${{ github.sha }}
#
# 6. This workflow expects the GitOps repo to contain a manifest file (e.g., stocktrader-azure-aks-cr.yml)
#    with image.repository and image.tag fields for the service being updated.
# =====================================================================================================

name: Build, Push to Azure ACR, Gitops

on:
  push:
    branches:
      - feat-githubIssues
    paths-ignore:
      - '.github/**'
  release:
    types: [created]

permissions:
  id-token: write
  contents: read
  issues: write
  models: read

env:
  GITHUB_SHA: ${{ github.sha }}
  ACR_NAME: kyncjot
  GITOPS_REPO: anandDev77/stocktrader-gitops
  GITOPS_DIR: application
  IMAGE_NAME: portfolio
  APP_NAME: portfolio
  IMAGE_TAG: ${{ github.sha }}
  GITOPS_USERNAME: ${{ secrets.GITOPS_USERNAME }}

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish Deploy
    runs-on: ubuntu-latest
    environment: production
    outputs:
      acr_login_server: ${{ steps.build_image.outputs.acr_login_server }}

    steps:
    # ---------------------------------------------------------------------------------
    # Step 1: Checkout the source code for the microservice from the current repository.
    # This ensures the workflow operates on the latest code for the build and Docker image.
    # ---------------------------------------------------------------------------------
    - name: Checkout
      uses: actions/checkout@v2

    # ---------------------------------------------------------------------------------
    # Step 2: Set up Java 17 for Maven build. Adjust the version if your app requires a different JDK.
    # ---------------------------------------------------------------------------------
    - name: Setup Java
      uses: actions/setup-java@v1
      with:
        java-version: 17

    # ---------------------------------------------------------------------------------
    # Step 3: Build and package the Java application using Maven.
    # This produces the JAR/WAR file to be included in the Docker image.
    # ---------------------------------------------------------------------------------
    - name: Build and package app
      run: mvn clean package

    # ---------------------------------------------------------------------------------
    # Step 4: Authenticate to Azure using OIDC and the provided secrets.
    # This step is required for all subsequent Azure CLI and ACR operations.
    # ---------------------------------------------------------------------------------
    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        enable-AzPSSession: true

    # ---------------------------------------------------------------------------------
    # Step 5: Log in to Azure Container Registry (ACR) using the Azure CLI.
    # This allows Docker to push images to your private registry.
    # ---------------------------------------------------------------------------------
    - name: Azure ACR Login
      run: az acr login --name $ACR_NAME

    # ---------------------------------------------------------------------------------
    # Step 6: Build the Docker image for the microservice and push it to ACR.
    # - Tags the image with both the commit SHA and 'latest'.
    # - Uses build args for traceability.
    # - Pushes both tags to ACR.
    # ---------------------------------------------------------------------------------
    - name: Build Docker image
      id: build_image
      run: |
        ACR_LOGIN_SERVER=$(az acr show --name $ACR_NAME --query loginServer --output tsv)
        echo "acr_login_server=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT
        docker build -t $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
          --build-arg GITHUB_SHA="$GITHUB_SHA" .

    # ---------------------------------------------------------------------------------
    # Step 7: Scan the built Docker image for vulnerabilities using Trivy and create GitHub issues for high severity findings.
    # This step checks for OS, library, secret, and misconfiguration issues in the image.
    # ---------------------------------------------------------------------------------
    - name: Security Scan with Trivy (JSON output)
      uses: aquasecurity/trivy-action@0.28.0
      with:
        image-ref: ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        format: 'json'
        output: 'trivy-results.json'
        exit-code: '0'
        ignore-unfixed: true
        severity: 'CRITICAL,HIGH'
        scanners: 'vuln,secret,misconfig'
        timeout: '5m0s'

    # ---------------------------------------------------------------------------------
    # Step 8: Create GitHub issues from Trivy scan results
    # ---------------------------------------------------------------------------------
    - name: Create GitHub Issues from Trivy Results
      uses: CemitDigital/trivy-report-issue-action@v1.1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        input-filename: 'trivy-results.json'
        label: 'bug'
        assignee: 'anandDev77'

    # ---------------------------------------------------------------------------------
    # Step 8.1: Find the latest created issue number and fetch its title/body
    # ---------------------------------------------------------------------------------
    - name: Find latest created issue number and fetch details
      id: find_issue
      run: |
        ISSUE_JSON=$(gh issue list --limit 1 --state open --author ${{ github.actor }} --json number,title,body --jq '.[0]')
        ISSUE_NUMBER=$(echo "$ISSUE_JSON" | jq -r '.number')
        ISSUE_TITLE=$(echo "$ISSUE_JSON" | jq -r '.title')
        ISSUE_BODY=$(echo "$ISSUE_JSON" | jq -r '.body')
        echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
        echo "issue_title<<EOF" >> $GITHUB_OUTPUT
        echo "$ISSUE_TITLE" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        echo "issue_body<<EOF" >> $GITHUB_OUTPUT
        echo "$ISSUE_BODY" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # ---------------------------------------------------------------------------------
    # Step 8.2: Call GitHub Models API for summary and action plan (with debugging)
    # ---------------------------------------------------------------------------------
    - name: Call AI model for summary and action plan (with debug)
      id: ai_summary
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ISSUE_TITLE: ${{ steps.find_issue.outputs.issue_title }}
        ISSUE_BODY: ${{ steps.find_issue.outputs.issue_body }}
      run: |
        PROMPT="Summarize the following GitHub issue in one paragraph, then provide a clear action plan for remediation:\nTitle: $ISSUE_TITLE\nBody: $ISSUE_BODY"
        RESPONSE=$(curl -s "https://models.github.ai/inference/chat/completions" \
           -H "Content-Type: application/json" \
           -H "Authorization: Bearer $GITHUB_TOKEN" \
           -d '{
                "messages": [
                    {
                       "role": "user",
                       "content": '"'$PROMPT'"'
                    }
                 ],
                 "model": "openai/gpt-3.5-turbo"
              }')
        echo "RAW RESPONSE: $RESPONSE"
        if echo "$RESPONSE" | jq . > /dev/null 2>&1; then
          SUMMARY=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')
          echo "response<<EOF" >> $GITHUB_OUTPUT
          echo "$SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "Error: Response is not valid JSON"
          echo "$RESPONSE"
          exit 1
        fi

    # ---------------------------------------------------------------------------------
    # Step 8.3: Comment with AI summary and action plan
    # ---------------------------------------------------------------------------------
    - name: Comment with AI summary and action plan
      run: |
        gh issue comment ${{ steps.find_issue.outputs.issue_number }} --body '${{ steps.ai_summary.outputs.response }}'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    

    # ---------------------------------------------------------------------------------
    # Step 9: Additional Trivy scan for comprehensive reporting (existing functionality).
    # This maintains the current detailed scan report for artifacts and logs.
    # ---------------------------------------------------------------------------------
    - name: Comprehensive Security Scan with Trivy
      uses: aquasecurity/trivy-action@0.28.0
      with:
        image-ref: ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        format: 'table'
        output: trivy-report.txt
        exit-code: '0'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH,MEDIUM'
        scanners: 'vuln,secret,misconfig'
        timeout: '5m0s'

    # ---------------------------------------------------------------------------------
    # Step 10: Upload the Trivy scan report as a workflow artifact for later review.
    # ---------------------------------------------------------------------------------
    - name: Upload Trivy scan report
      uses: actions/upload-artifact@v4
      with:
        name: trivy-report
        path: trivy-report.txt

    # ---------------------------------------------------------------------------------
    # Step 11: Display the Trivy scan report in the workflow logs for quick visibility.
    # ---------------------------------------------------------------------------------
    - name: Show Trivy scan report in log
      run: cat trivy-report.txt
      continue-on-error: true

    # ---------------------------------------------------------------------------------
    # Step 12: Push the Docker image to ACR.
    # ---------------------------------------------------------------------------------
    - name: Push Docker image to ACR
      run: |
        ACR_LOGIN_SERVER=$(az acr show --name $ACR_NAME --query loginServer --output tsv)
        docker push $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        docker tag $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:latest
        docker push $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:latest

  update-gitops-repo:
    name: Publish image updates to gitops repo
    runs-on: ubuntu-latest
    needs: [setup-build-publish-deploy]
    steps:
      # ---------------------------------------------------------------------------------
      # Step 1: Checkout the GitOps repository containing the deployment manifests.
      # Uses a GitHub PAT for authentication to allow pushing changes.
      # ---------------------------------------------------------------------------------
      - name: Checkout gitops repo
        uses: actions/checkout@v2
        with:
          repository: ${{ env.GITOPS_REPO }}
          path: gitops
          token: ${{ secrets.GITOPS_TOKEN }}

      # ---------------------------------------------------------------------------------
      # Step 2: Update the application manifest (YAML) with the new image repository and tag.
      # - Uses yq to update the .spec.portfolio.image.repository and .spec.portfolio.image.tag fields.
      # - Only commits and pushes if there are actual changes.
      # - The commit message includes the app name and new version (SHA).
      # ---------------------------------------------------------------------------------
      - name: Update application
        run: |
          set -x
          set +e
          ls -la
          ls -la gitops
          cd gitops
          echo "print yq version"
          yq --version
          ACR_LOGIN_SERVER="${{ needs.setup-build-publish-deploy.outputs.acr_login_server }}"
          APP_IMAGE="$ACR_LOGIN_SERVER/${IMAGE_NAME}"
          VERSION="${{ github.sha }}"
          APP_NAME="${{ env.APP_NAME }}"
          yq e ".spec.portfolio.image.repository = \"$APP_IMAGE\"" -i "${GITOPS_DIR}/stocktrader-azure-aks-cr.yml"
          yq e ".spec.portfolio.image.tag = \"$VERSION\"" -i "${GITOPS_DIR}/stocktrader-azure-aks-cr.yml"
          cat "${GITOPS_DIR}/stocktrader-azure-aks-cr.yml"
          if [[ $(git status -s | wc -l) -eq 0 ]]; then
            echo "No changes"
            exit 0
          fi
          git add "${GITOPS_DIR}/"
          git config --global user.name 'GH Actions'
          git config --global user.email 'github-actions@users.noreply.github.com'
          git commit -am "Updates ${APP_NAME} to ${VERSION}"
          git push https://$GITOPS_USERNAME:$GITOPS_TOKEN@github.com/$GITOPS_REPO 
